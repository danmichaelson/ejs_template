{"ts":1391173113594,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Load required modules (and then we refer to them by these variables)\nvar http = require('http');\nvar fs = require('fs');\nvar ejs = require('ejs');\n\n// Read the template from disk (and then we refer to it by this variable)\nvar view = fs.readFileSync(__dirname + '/view.ejs', 'utf8');\n\n// Start our HTTP server (and then this function is called for every request)\nhttp.createServer(function (req, res) {\n    \n    // req is the request\n    // res will be the response\n    \n    // Send the HTTP header\n    res.writeHead(200, {'Content-Type': 'text/html'});\n    \n    // Get three durations (in milliseconds) from the request URL\n    // Example request URL: /1500/200/3000\n    var urlParts = req.url.split('/'); // \"/1500/2000/3000\" becomes [\"\", \"1500\", \"2000\", \"3000\"]\n    \n    // Assign the durations to variables for convenience\n    var d1 = urlParts[1];\n    var d2 = urlParts[2];\n    var d3 = urlParts[3];\n    \n    // Do some math to show off conditionals\n    // If the second square's duration is between the first and the third, \n    // make the third square real slow and slow down the first a bit\n    if ((d2 > d1) && (d2 < d3)) {\n        d3 = 60000;\n        d1 *= 1.25; // This is the same as d1 = d1 * 1.25 . Multiply d1 by 1.25 and store the result back in d1.\n    }\n    // Otherwise divide d3 by 2 (speed it up 2x)\n    else {\n        d3 /= 2; // This is the same as d1 = d1 / 2 . Divide d1 by 2 and store the result back in d1.\n    }\n    \n    // Conditional/comparison operators:\n    // && ... and\n    // || ... or\n    // ! ... not\n    // == is equal to (REMEMBER: single = means assignment, double == means comparison)\n    // != is not equal to\n    // < ... is less than\n    // > ... is greater than\n    // <= ... is less than or equal to\n    // >= ... is greater than or equal to\n    \n    // Render the template, passing d1, d2, and d3 in as template variables duration1, duration2, and duration3\n    // and stream the result to the browser as the HTTP payload\n    res.write(ejs.render(view, {locals: {\n        duration1: d1, \n        duration2: d2, \n        duration3: d3,\n    }}));\n    \n    // Close the HTTP connection (hang up the phone on the browser)\n    res.end();\n  \n}).listen(process.env.PORT);\n"]],"start1":0,"start2":0,"length1":0,"length2":2215}]],"length":2215}
